{"version":3,"sources":["pdfuploader.js","App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync"],"names":["PDFUploder","state","file","numPages","pageNumber","onFileChange","event","_this","setState","target","files","onDocumentLoadSuccess","_ref","nextPage","nextPageNumber","crntPageNumber","_this$state","this","react_default","a","createElement","className","Row","Col","lg","aria-hidden","type","onChange","Button","onClick","centered","columns","entry","onLoadSuccess","noData","Component","pdfjs","GlobalWorkerOptions","workerSrc","concat","version","App","pdfuploader","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id"],"mappings":"2OAqFeA,6MA9EXC,MAAQ,CACRC,KAAM,KAAOC,SAAU,EAAGC,WAAY,KAGxCC,aAAe,SAACC,GACdC,EAAKC,SAAS,CACZN,KAAMI,EAAMG,OAAOC,MAAM,QAI7BC,sBAAwB,SAAAC,GAAkB,IAAfT,EAAeS,EAAfT,SACzBI,EAAKC,SAAS,CAAEL,SAAUA,OAG5BU,SAAW,WAET,IACIC,EADEC,EAAiBR,EAAKN,MAAMG,WAIhCU,EADEC,EAAiB,EAAIR,EAAKN,MAAME,SACjB,EAEAY,EAAiB,EAGpCR,EAAKC,SAAS,CACZJ,WAAYU,6EAIP,IAAAE,EAC0BC,KAAKhB,MAA9BG,EADDY,EACCZ,WAAYD,EADba,EACab,SAEpB,OAECe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAEfH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAG,MACLN,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaI,cAAY,SAA1C,gBAGJP,EAAAC,EAAAC,cAAA,WACSF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaI,cAAY,SAA1C,eACAP,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaI,cAAY,SAA1C,mBAKjBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEbH,EAAAC,EAAAC,cAAA,aAAIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAqBI,cAAY,SAAlD,gBACAP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOL,UAAU,oBAAoBM,SAAUV,KAAKZ,iBAGrEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAG,MAERP,KAAKhB,MAAMC,KAAOgB,EAAAC,EAAAC,cAAA,iBAAShB,EAAT,OAAyBD,EAAzB,MAAqCe,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAQP,UAAU,gBAAgBQ,QAASZ,KAAKJ,UAAhD,cAArC,KAA0H,KAC7IK,EAAAC,EAAAC,cAAA,OAAKU,UAAQ,EAACC,QAAS,GACvBb,EAAAC,EAAAC,cAACY,EAAA,SAAD,CAAU9B,KAAMe,KAAKhB,MAAMC,KAAM+B,cAAehB,KAAKN,sBAAuBuB,OAAQ,0BACpFhB,EAAAC,EAAAC,cAACY,EAAA,KAAD,CAAM5B,WAAYA,iBAnED+B,aCCzBC,QAAMC,oBAAoBC,UAA1B,2CAAAC,OAAiFH,QAAMI,QAAvF,kBAWeC,MATf,WACE,OACIvB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAChBH,EAAAC,EAAAC,cAACsB,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iCEnInB,SAAAC,EAAAC,GACA,IAAAC,EAAA,IAAAC,MAAA,uBAAAF,EAAA,KAEA,MADAC,EAAAE,KAAA,mBACAF,EAEAF,EAAAK,KAAA,WAAuC,UACvCL,EAAAM,QAAAN,EACAO,EAAAC,QAAAR,EACAA,EAAAS,GAAA","file":"static/js/main.1cbac249.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport { Document, Page } from 'react-pdf';\r\nimport { Button,  Row, Col } from 'react-bootstrap';\r\n\r\nclass PDFUploder extends Component {\r\n\r\n    state = {\r\n    file: null,  numPages: 0, pageNumber: 1\r\n  }\r\n\r\n  onFileChange = (event) => {\r\n    this.setState({\r\n      file: event.target.files[0]\r\n    });\r\n  }\r\n\r\n  onDocumentLoadSuccess = ({ numPages }) => {\r\n    this.setState({ numPages: numPages  });\r\n  }\r\n\r\n  nextPage = () => {\r\n\r\n    const crntPageNumber = this.state.pageNumber;\r\n    let nextPageNumber;\r\n\r\n    if (crntPageNumber + 1 > this.state.numPages) {\r\n      nextPageNumber = 1;\r\n    } else {\r\n      nextPageNumber = crntPageNumber + 1;\r\n    }\r\n\r\n    this.setState({\r\n      pageNumber: nextPageNumber\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { pageNumber, numPages } = this.state;\r\n\r\n    return (\r\n\r\n     <div className=\"container-fluid\">\r\n     <div className=\"NavLeftPanel\">\r\n\r\n     <Row>\r\n         <Col lg=\"12\">\r\n            <header>\r\n                <h1><i className=\"fa fa-book\" aria-hidden=\"true\"></i>Reader Zone</h1>\r\n                 \r\n            </header>\r\n            <nav>\r\n                     <ul>\r\n                         <li><i className=\"fa fa-file\" aria-hidden=\"true\"></i> Document 1</li>\r\n                         <li><i className=\"fa fa-file\" aria-hidden=\"true\"></i> Document 2</li>\r\n                     </ul>\r\n                 </nav>\r\n        </Col>\r\n        </Row>\r\n        <div className=\"fileUplods\">\r\n      \r\n          <p> <i className=\"fa fa-cloud-upload\" aria-hidden=\"true\"></i>Upload Files</p>\r\n          <input type=\"file\" className=\"custom-file-input\" onChange={this.onFileChange}/>\r\n        </div>\r\n     </div>\r\n     <div className=\"contentPanel\">\r\n     <Row>\r\n         <Col lg=\"12\">\r\n       \r\n        {this.state.file ? <p>Page {pageNumber} of {numPages}   <Button className=\"next_btnAdded\" onClick={this.nextPage}>Next Page </Button> </p> : null}\r\n        <div centered columns={2}>\r\n        <Document file={this.state.file} onLoadSuccess={this.onDocumentLoadSuccess} noData={\"Please select pdf file\"}>\r\n        <Page pageNumber={pageNumber} />\r\n            </Document>\r\n          \r\n        </div>\r\n        </Col>\r\n      </Row>\r\n     </div>\r\n      \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PDFUploder;","import React from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { pdfjs } from 'react-pdf';\nimport PDFUploder from './pdfuploader'\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nfunction App() {\n  return (\n      <main className=\"App-header\">\n      <PDFUploder />\n     \n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 27;"],"sourceRoot":""}